"""
Class to read, write, create and manipulate ypp input files.
"""

import os
from .YamboIn import YamboIn

class YppIn():
    """
    The building of a yambo input for ypp computations requires that a file
    generated by "ypp -options -F filename" already exists.
    Then the input can be build as YamboIn(filename). The object can be modified
    and saved on disk with the wanted name. After that, a new call of ypp is
    needed. This class manage these operations and allows us to deal with the ypp
    inputs in a easy way.
    """

    def __init__(self,command,folder='.',filename='ypp.in'):

        self.command = command
        """
        The command to be executed, for instance ypp -s b.
        """
        self.folder = folder
        """
        The path where the SAVE folder is located. Typically the run_dir of the
        dataset.
        """

        input_path = self.folder + '/' + filename
        # If filename exists is deleted and created from scratch. Then self.input
        # can then be instanciated
        if os.path.isfile(input_path):
            string = 'rm %s'%input_path
            print('delete %s'%input_path)
            os.system(string)
        string = 'cd %s; %s -F %s'%(self.folder,self.command,filename)
        print('execute : ',string)
        os.system(string)

        self.input = YamboIn(filename=input_path)

    def getInput(self):
        """
        Return the YamboIn input object that can be used to build the wanted input.
        """
        return self.input

    def write(self,file_path):
        """
        Write the input file on disk and execute self.command on the input file.
        The pre_processing of YamboCalculator calls write with the argument
        'folder' + '/' + 'filename' so we split it here to apply the self.command
        """
        run_dir = file_path.split('/')[0]
        filename = file_path.split('/')[1]
        self.input.write(file_path)
        string = 'cd %s; %s -F %s'%(run_dir,self.command,filename)
        print('execute : ',string)
        os.system(string)
